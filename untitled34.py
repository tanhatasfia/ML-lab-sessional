# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sB3g72p3Rrg1HjXOpIANQFahhxtg1OrS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from zipfile import ZipFile
zipFileObject=ZipFile('/content/drive/MyDrive/ML_eval/archive (2).zip')
zipFileObject.extractall('/tmp/dataset/')

df=pd.read_csv('/tmp/dataset/diabetes.csv', index_col=0)

X=df.iloc[:, :-1]

y=df.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,stratify=y,random_state=42)

from sklearn.tree import DecisionTreeClassifier
DT=DecisionTreeClassifier()
DT.fit(X_train,y_train)

DT.predict(X_test)
DT.score(X_test,y_test)

from sklearn.tree import DecisionTreeClassifier
DT2=DecisionTreeClassifier()
DT2.fit(X_train,y_train)

DT2.predict(X_test)
DT2.score(X_test,y_test)

from sklearn.tree import DecisionTreeClassifier
DT3=DecisionTreeClassifier()
DT3.fit(X_train,y_train)

DT3.predict(X_test)
DT3.score(X_test,y_test)

from sklearn.ensemble import VotingClassifier
estimators =[('DT',DT),('dt2',DT2),('DT3',DT3)]
ensemble =VotingClassifier(estimators,voting='hard')

ensemble.fit(X_train,y_train)
ensemble.score(X_test,y_test)

from sklearn.linear_model import LogisticRegression
log_reg= LogisticRegression()
log_reg.fit(X_train,y_train)
log_reg.predict(X_test)
log_reg.score(X_test,y_test)

from sklearn.linear_model import LogisticRegression
log_reg2= LogisticRegression()
log_reg2.fit(X_train,y_train)
log_reg2.predict(X_test)
log_reg2.score(X_test,y_test)

from sklearn.linear_model import LogisticRegression
log_reg3= LogisticRegression()
log_reg3.fit(X_train,y_train)
log_reg3.predict(X_test)
log_reg3.score(X_test,y_test)

from sklearn.ensemble import VotingClassifier
estimators =[('L1',log_reg),('l2',log_reg2),('l3',log_reg3)]
ensemble2 =VotingClassifier(estimators,voting='hard')

ensemble2.fit(X_train,y_train)
ensemble2.score(X_test,y_test)